
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"placement":"top","type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/website/index.html","title":"Home"}},[_c('span',{staticClass:"badge rounded-pill bg-success"},[_v("CS2103/T "),_c('small',[_v("2023 Aug-Nov")])])])]},proxy:true},{key:"right",fn:function(){return [_c('li',{staticClass:"nav-link"},[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"placeholder":"Search","algolia":"","menu-align-right":""}})],1)])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link algolia-no-index",scopedSlots:_u([{key:"header",fn:function(){return [_c('strong',[_v("Schedule")])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/timeline.html"}},[_c('span',[_c('strong',[_v("Full Timeline")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week1/index.html"}},[_c('span',[_c('strong',[_v("Week 1")]),_v(" [Mon, Aug 14th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week2/index.html"}},[_c('span',[_c('strong',[_v("Week 2")]),_v(" [Fri, Aug 18th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week3/index.html"}},[_c('span',[_c('strong',[_v("Week 3")]),_v(" [Fri, Aug 25th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week4/index.html"}},[_c('span',[_c('strong',[_v("Week 4")]),_v(" [Fri, Sep 1st] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week5/index.html"}},[_c('span',[_c('strong',[_v("Week 5")]),_v(" [Fri, Sep 8th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week6/index.html"}},[_c('span',[_c('strong',[_v("Week 6")]),_v(" [Fri, Sep 15th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week7/index.html"}},[_c('span',[_c('strong',[_v("Week 7")]),_v(" [Fri, Sep 22nd] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week8/index.html"}},[_c('span',[_c('strong',[_v("Week 8")]),_v(" [Fri, Oct 6th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week9/index.html"}},[_c('span',[_c('strong',[_v("Week 9")]),_v(" [Fri, Oct 13th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week10/index.html"}},[_c('span',[_c('strong',[_v("Week 10")]),_v(" [Fri, Oct 20th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week11/index.html"}},[_c('span',[_c('strong',[_v("Week 11")]),_v(" [Fri, Oct 27th] ")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week12/index.html"}},[_c('span',[_c('strong',[_v("Week 12")]),_v(" [Fri, Nov 3rd]  "),_c('span',{staticClass:"fas fa-arrow-circle-left",attrs:{"aria-hidden":"true"}})])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/schedule/week13/index.html"}},[_c('span',[_c('strong',[_v("Week 13")]),_v(" [Fri, Nov 10th] ")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/website/se-book-adapted/index.html"}},[_c('span',[_c('strong',[_v("Textbook")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/website/admin/index.html"}},[_c('span',[_c('strong',[_v("Admin Info")])])])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113 m--tic4001 m--tic4002"}},[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/dashboards","target":"_blank","highlight-on":"none"}},[_c('span',[_c('strong',[_v("Dashboards")])])])]),_v(" "),_c('dropdown',{staticClass:"nav-link algolia-no-index",attrs:{"tags":"m--cs2103 m--cs2113 m--tic4001 m--tic4002"},scopedSlots:_u([{key:"header",fn:function(){return [_c('strong',[_v("Project Links")])]},proxy:true}])},[_v(" "),_c('span',[_c('strong',[_v(" Individual Project (iP):")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/ip-overview.html"}},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-drafting-compass",attrs:{"aria-hidden":"true"}})])]),_v(" Individual Project Info")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://github.com/nus-cs2103-AY2324S1/ip","target":"_blank"}},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-code-branch",attrs:{"aria-hidden":"true"}})])]),_v(" iP Upstream Repo")])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--tic4001 m--tic4002"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/ip-showcase.html"}},[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-list-alt",attrs:{"aria-hidden":"true"}}),_v(" iP Showcase")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/ip-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByRepos&breakdown=true&checkedFileTypes=java~md~fxml~sh~bat~gradle~txt","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-chart-area",attrs:{"aria-hidden":"true"}}),_v(" iP Code Dashboard")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item text-success",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/dashboards/contents/ip-progress.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}}),_v(" iP Progress Dashboard")])])]),_v(" "),_c('hr'),_v(" "),_c('span',[_c('strong',[_v(" Team Project (tP):")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/tp-expectations.html"}},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-drafting-compass",attrs:{"aria-hidden":"true"}})])]),_v(" Team Project Info")])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113 m--tic4002"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://github.com/nus-cs2103-AY2324S1/tp","target":"_blank"}},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-code-branch",attrs:{"aria-hidden":"true"}})])]),_v(" tP Upstream Repo (AB3)")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/teamList.html"}},[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-list-alt",attrs:{"aria-hidden":"true"}}),_v(" Team List")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByRepos&breakdown=true&checkedFileTypes=docs~functional-code~test-code~other","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-chart-area",attrs:{"aria-hidden":"true"}}),_v(" tP Code Dashboard")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item text-success",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/dashboards/contents/tp-progress.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}}),_v(" tP Progress Dashboard")])])])]),_v(" "),_c('dropdown',{staticClass:"nav-link algolia-no-index",scopedSlots:_u([{key:"header",fn:function(){return [_c('strong',[_v("Other Links")])]},proxy:true}])},[_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113 m--tic4001 m--tic4002"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://github.com/nus-cs2103-AY2324S1/forum/issues","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-bug",attrs:{"aria-hidden":"true"}}),_v(" Report Bugs")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://github.com/nus-cs2103-AY2324S1/forum/issues","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-comment",attrs:{"aria-hidden":"true"}}),_v(" Forum")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/instructors.html"}},[_c('span',[_c('span',{staticClass:"fas fa-user-tie",attrs:{"aria-hidden":"true"}}),_v(" Instructors")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://canvas.nus.edu.sg/courses/45682/announcements","target":"_blank"}},[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-bullhorn",attrs:{"aria-hidden":"true"}}),_v(" Announcements")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://canvas.nus.edu.sg/courses/45682/files","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-file-upload",attrs:{"aria-hidden":"true"}}),_v(" Files (handouts, submissions etc.)")])])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2113 m--cs2103"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/admin/tutorials.html"}},[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-calendar",attrs:{"aria-hidden":"true"}}),_v(" Tutorial Schedule")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://teams.microsoft.com/l/team/19%3aetv-ahOucAqj-ZL13z-nIQsuTCIJVvW683aNXj4OcME1%40thread.tacv2/conversations?groupId=7b368f45-ea75-4442-88fa-7b6ede957fd5&tenantId=5ba5ef5e-3109-4e77-85bd-cfeb0d347e82","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-users-cog",attrs:{"aria-hidden":"true"}}),_v(" MS Teams link")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/website/git-trail/index.html"}},[_c('span',[_c('span',{staticClass:"fas fa-route",attrs:{"aria-hidden":"true"}}),_v(" Git Learning Trail")])])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113 m--tic2002 m--tic4001 m--tic4002"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://se-education.org/guides/conventions/java/intermediate.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-code",attrs:{"aria-hidden":"true"}}),_v(" Java Coding Standard")])])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113 m--tic4001 m--tic4002"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://se-education.org/guides/conventions/git.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fab fa-git-square",attrs:{"aria-hidden":"true"}}),_v(" Git Conventions")])])]),_v(" "),_c('li',{attrs:{"tags":"m--cs2103 m--cs2113"}},[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/dashboards/contents/forum-activities.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}}),_v(" Forum Activities Dashboard")])])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item text-success",attrs:{"href":"https://nus-cs2103-ay2324s1.github.io/dashboards/contents/participation.html","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}}),_v(" Participation Dashboard")])])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_c('link',{attrs:{"rel":"stylesheet","href":"/website/book/css/textbook.css"}}),_v(" "),_c('link',{attrs:{"rel":"stylesheet","href":"/website/book/css/print.css"}}),_v(" "),_c('div',{staticClass:"website-content"},[_m(0),_v(" "),_m(1),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"what"}},[_v("What "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DarkOrange"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#what","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"far fa-file-alt",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('blockquote',[_c('p',[_c('strong',[_c('em',[_v("Revision control")]),_v(" is the process of managing multiple versions of a piece of information.")]),_v(" In its simplest form, this is something that many people do by hand: every time you modify a file, save it under a new name that contains a number, each one higher than the number of the preceding version.")]),_v(" "),_c('p',[_v("Manually managing multiple versions of even a single file is an error-prone task, though, so software tools to help automate this process have long been available. The earliest automated revision control tools were intended to help a single user to manage revisions of a single file. Over the past few decades, the scope of revision control tools has expanded greatly; they now manage multiple files, and help multiple people to work together. The best modern revision control tools have no problem coping with thousands of people working together on projects that consist of hundreds of thousands of files.")]),_v(" "),_c('p',[_c('strong',[_v("Revision control software will track the history and evolution of your project")]),_v(", so you don't have to. For every change, you'll have a log of who made it; why they made it; when they made it; and what the change was.")]),_v(" "),_c('p',[_c('strong',[_v("Revision control software makes it easier for you to collaborate")]),_v(" when you're working with other people. For example, when people more or less simultaneously make potentially incompatible changes, the software will help you to identify and resolve those conflicts.")]),_v(" "),_c('p',[_c('strong',[_v("It can help you to recover from mistakes")]),_v(". If you make a change that later turns out to be an error, you can revert to an earlier version of one or more files. In fact, a really good revision control tool will even help you to efficiently figure out exactly when a problem was introduced.")]),_v(" "),_c('p',[_c('strong',[_v("It will help you to work simultaneously on, and manage the drift between, multiple versions of your project.")]),_v(" Most of these reasons are equally valid, at least in theory, whether you're working on a project by yourself, or with a hundred other people.")]),_v(" "),_c('p',[_v("-- [adapted from "),_c('trigger',{attrs:{"trigger":"click","for":"modal:rcsWhat-bryanMercurialGuide"}},[_v("bryan-mercurial-guide")]),_v("]")],1)])]),_v(" "),_c('tab',{staticClass:"d-print-none algolia-no-index",scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"glyphicon glyphicon-facetime-video",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('div',{staticClass:"block-embed block-embed-service-youtube",staticStyle:{"position":"relative","padding-bottom":"60.9375%"}},[_c('iframe',{attrs:{"type":"text/html","src":"//www.youtube.com/embed/M-O8ZNW9icQ","frameborder":"0","webkitallowfullscreen":"","mozallowfullscreen":"","allowfullscreen":""}})])])],1),_v(" "),_c('modal',{staticClass:"algolia-no-index",attrs:{"large":"","id":"modal:rcsWhat-bryanMercurialGuide"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Reference » Mercurial: The Definitive Guide")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('a',{attrs:{"href":"http://hgbook.red-bean.com/"}},[_c('em',[_c('strong',[_v("Mercurial: The Definitive Guide")])])]),_v(" by Bryan O'Sullivan retrieved on 2012/07/11")])])]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Revision")]),_v(": A "),_c('em',[_v("revision")]),_v(" (some seem to use it interchangeably with "),_c('em',[_v("version")]),_v(" while others seem to distinguish the two -- here, let us treat them as the same, for simplicity) is a state of a piece of information at a specific time that is a result of some changes to it "),_c('span',{staticClass:"dimmed"},[_v("e.g., if you modify the code and save the file, you have a new "),_c('em',[_v("revision")]),_v(" (or a new "),_c('em',[_v("version")]),_v(") of that file")]),_v(".")])])]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("RCS")]),_v(":  "),_c('strong',[_v("Revision control software")]),_v(" are the software tools that automate the process of "),_c('em',[_v("Revision Control")]),_v(" i.e. managing revisions of software artifacts.")])])]),_v(" "),_m(2),_v(" "),_m(3),_v(" "),_m(4)],1)])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"repositories"}},[_v("Repositories "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"Crimson"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#repositories","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"far fa-file-alt",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('p',[_c('strong',[_v("The "),_c('em',[_v("repository")]),_v(" is the database that stores the revision history.")]),_v(" Suppose you want to apply revision control on files in a directory called "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("ProjectFoo")]),_v(". In that case, you need to set up a "),_c('em',[_v("repo")]),_v(" (short for repository) in the "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("ProjectFoo")]),_v(" directory, which is referred to as the "),_c('em',[_v("working directory")]),_v(" of the repo. For example, Git uses a hidden folder named "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v(".git")]),_v(" inside the working directory, to store the database of the working directory's revision history.")]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Repository")]),_v(" ("),_c('em',[_v("repo")]),_v(" for short):  The database of the history of a directory being tracked by an RCS software (e.g. Git).")])])]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Working directory")]),_v(": the root directory revision-controlled by Git (e.g., the directory in which the repo was initialized).")])])]),_v(" "),_c('p',[_c('strong',[_v("You can have multiple repos in your computer")]),_v(", each repo revision-controlling files of a different working directory, for examples, files of different projects.")])],1),_v(" "),_c('tab',{staticClass:"d-print-none algolia-no-index",scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"glyphicon glyphicon-facetime-video",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('div',{staticClass:"block-embed block-embed-service-youtube",staticStyle:{"position":"relative","padding-bottom":"60.9375%"}},[_c('iframe',{attrs:{"type":"text/html","src":"//www.youtube.com/embed/mLnxwlCEIb8","frameborder":"0","webkitallowfullscreen":"","mozallowfullscreen":"","allowfullscreen":""}})])])],1)],1)])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"saving-history"}},[_v("Saving History "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"Crimson"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#saving-history","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_m(5),_v(" "),_m(6),_v(" "),_m(7),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"far fa-file-alt",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('p',[_c('strong',[_c('mark',[_c('em',[_v("Committing")])]),_v(" saves a snapshot of the current state of the tracked files in the revision control history.")]),_v(" Such a snapshot is also called a "),_c('em',[_v("commit")]),_v(" (i.e. the noun).")]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Commit")]),_v(" (noun): a change (aka a "),_c('em',[_v("revision")]),_v(") saved in the Git revision history."),_c('br'),_v("\n(verb): the act of creating a commit i.e., saving a change in the working directory into the Git revision history.")])])]),_v(" "),_c('p',[_c('strong',[_v("When ready to commit, you first add the specific changes you want to commit to a "),_c('mark',[_v("staging area")]),_v(".")]),_v(" This intermediate step allows you to commit only some changes while saving other changes for a later commit.")]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Stage")]),_v(" (verb): Instructing Git to prepare a file for committing.")])])])],1),_v(" "),_c('tab',{staticClass:"d-print-none algolia-no-index",scopedSlots:_u([{key:"header",fn:function(){return [_c('span',[_c('span',{staticClass:"glyphicon glyphicon-facetime-video",attrs:{"aria-hidden":"true"}})])]},proxy:true}])},[_v(" "),_c('div',{staticClass:"block-embed block-embed-service-youtube",staticStyle:{"position":"relative","padding-bottom":"60.9375%"}},[_c('iframe',{attrs:{"type":"text/html","src":"//www.youtube.com/embed/7exFDGHgQcw","frameborder":"0","webkitallowfullscreen":"","mozallowfullscreen":"","allowfullscreen":""}})])])],1)],1)])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"using-history"}},[_v("Using History "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DarkOrange"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#using-history","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_c('p',[_c('strong',[_c('trigger',{attrs:{"for":"pop:rcs"}},[_v("RCS")]),_v(" tools store the history of the working directory as a series of commits.")],1),_v(" This means you should commit after each change that you want the RCS to 'remember'.")]),_v(" "),_m(8),_v(" "),_m(9),_v(" "),_m(10),_v(" "),_m(11),_v(" "),_c('div',[_c('popover',{attrs:{"id":"pop:rcs","placement":"top"},scopedSlots:_u([{key:"content",fn:function(){return [_c('div',[_c('div',[_c('p',[_c('strong',[_v("RCS")]),_v(":  "),_c('strong',[_v("Revision control software")]),_v(" are the software tools that automate the process of "),_c('em',[_v("Revision Control")]),_v(" i.e. managing revisions of software artifacts.")])])])]},proxy:true}])})],1)])])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"remote-repositories"}},[_v("Remote Repositories "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DarkOrange"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#remote-repositories","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_m(12),_v(" "),_m(13),_v(" "),_m(14),_v(" "),_m(15),_v(" "),_c('div',{attrs:{"id":"section-pulling"}},[_c('p',[_m(16),_v(", but only if the repos have a shared history. Let's say some new commits were added to the "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_c('em',[_v("upstream")]),_v(" repo is a term used to refer to the repo you cloned from")]},proxy:true}])},[_v("upstream repo")]),_v(" after you cloned it and you would like to copy over those new commits to your own clone i.e., "),_c('mark',[_v("sync")]),_v(" your clone with the upstream repo. In that case, you pull from the upstream repo to your clone.")],1)]),_v(" "),_m(17),_v(" "),_c('p',[_v("Cloning, pushing, and pulling can be done between two local repos too, although it is more common for them to involve a remote repo.")]),_v(" "),_m(18),_v(" "),_m(19),_v(" "),_c('div',{attrs:{"id":"section-pull-request"}},[_c('p',[_m(20),_v(" i.e., \"I'm "),_c('em',[_v("requesting")]),_v(" you to "),_c('em',[_v("pull")]),_v(" my proposed changes to your repo\". For this to work, the two repos must have a shared history. The most common case is sending PRs from a fork to its "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_c('em',[_v("upstream")]),_v(" repo is a repo you forked from")]},proxy:true}])},[_v("upstream")]),_v(" repo.")],1)]),_v(" "),_c('div',{directives:[{name:"closeable",rawName:"v-closeable"}],staticClass:"non-printable",attrs:{"alt":"slideshow: remote repo scenario"}},[_m(21),_v(" "),_m(22)])])])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"branching"}},[_v("Branching "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DarkOrange"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#branching","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_m(23),_v(" "),_m(24),_v(" "),_c('pic',{attrs:{"eager":"","src":"/website/book/revisionControl/branching/images/diagram.png","height":"180"}},[_c('strong',[_v("Branching and merging")])]),_v(" "),_c('p',[_m(25),_v(" and the "),_c('trigger',{attrs:{"for":"pop:rcs"}},[_v("RCS")]),_v(" cannot decide which changes to keep. In those cases, you have to ‘resolve’ the conflicts manually.")],1)],1)])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"drcs-vs-crcs"}},[_v("DRCS vs CRCS "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DodgerBlue"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#drcs-vs-crcs","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_m(26),_v(" "),_m(27),_v(" "),_c('pic',{attrs:{"eager":"","src":"/website/book/revisionControl/drcsVsCrcs/images/crcsDiagram.png","width":"300"}},[_c('p',[_c('em',[_v("The centralized RCS approach without any local repos (e.g., CVS, SVN)")])])]),_c('p'),_v(" "),_m(28),_v(" "),_c('pic',{attrs:{"eager":"","src":"/website/book/revisionControl/drcsVsCrcs/images/drcsDiagram.png","width":"300"}},[_c('p',[_c('em',[_v("The decentralized RCS approach")])])]),_c('p')],1)])]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('h4',{attrs:{"id":"forking-flow"}},[_v("Forking Flow "),_c('span',{staticClass:"badge bg-light text-dark"},[_c('small',[_c('small',[_c('font',{attrs:{"color":"DarkOrange"}},[_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"glyphicon glyphicon-flash",attrs:{"aria-hidden":"true"}})])],1)])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#forking-flow","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"indented-less"},[_c('div',[_c('pic',{attrs:{"eager":"","src":"/website/book/revisionControl/forkingWorkflow/images/diagram.png","height":"330"}}),_v(" "),_c('p'),_v(" "),_m(29),_v(" "),_c('p',[_v("To illustrate how the workflow goes, let’s assume Jean wants to fix a bug in the code. Here are the steps:")]),_v(" "),_c('ol',[_c('li',[_v("Jean creates a separate branch in her local repo and fixes the bug in that branch."),_c('br'),_v(" "),_c('span',{staticStyle:{"color":"red"}},[_c('big',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-exclamation-sign",attrs:{"aria-hidden":"true"}})])])],1),_v(" Common mistake: Doing the proposed changes in the "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("master")]),_v(" branch -- if Jean does that, she will not be able to have more than one PR open at any time because any changes to the "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("master")]),_v(" branch will be reflected in all open PRs.")]),_v(" "),_c('li',[_v("Jean pushes the branch to her fork.")]),_v(" "),_c('li',[_v("Jean creates a pull request from that branch in her fork to the main repo.")]),_v(" "),_c('li',[_v("Other members review Jean’s pull request.")]),_v(" "),_c('li',[_v("If reviewers suggested any changes, Jean updates the PR accordingly.")]),_v(" "),_c('li',[_v("When reviewers are satisfied with the PR, one of the members (usually the team lead or a designated 'maintainer' of the main repo) merges the PR, which brings Jean’s code to the main repo.")]),_v(" "),_c('li',[_v("Other members, realizing there is new code in the upstream repo, sync their forks with the new upstream repo (i.e. the main repo). This is done by pulling the new code to their own local repo and pushing the updated code to their own fork. If there are unmerged branches in the local repo, they can be updated too e.g., by merging the new "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("master")]),_v(" branch to each of them."),_c('br'),_v(" "),_c('span',{staticStyle:{"color":"red"}},[_c('big',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-exclamation-sign",attrs:{"aria-hidden":"true"}})])])],1),_v(" Possible mistake: Creating another 'reverse' PR from the team repo to the team member's fork to sync the member's fork with the merged code. PRs are meant to go from downstream repos to upstream repos, not in the other direction.")])]),_v(" "),_c('p',[_v("One main benefit of this workflow is that it does not require most contributors to have write permissions to the main repository. Only those who are merging PRs need write permissions.\nThe main drawback of this workflow is the extra overhead of sending everything through forks.")])],1)])])])])]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})]),_v(" "),_c('scroll-top-button')],1),_v(" "),_m(30)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"title"}},[_c('div',[_c('h1',{attrs:{"id":"revision-control"}},[_c('span',[_v("Revision control")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#revision-control","onclick":"event.stopPropagation()"}})])])])}
},function anonymous(
) {
with(this){return _c('div',[_c('small',[_c('span',{staticClass:"dimmed"},[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-print",attrs:{"aria-hidden":"true"}})]),_v(" This is a "),_c('strong',[_v("printer-friendly")]),_v(" version. It omits exercises, optional topics (i.e., four-star topics), and other extra content such as learning outcomes.")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Revision control software are also known as "),_c('em',[_v("Version Control Software (VCS)")]),_v(", and by a few other names.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_c('span',{staticClass:"large"},[_c('a',{attrs:{"href":"https://git-scm.com/"}},[_c('span',{staticClass:"fab fa-git-alt",attrs:{"aria-hidden":"true"}}),_v(" Git")])]),_v(" is the most widely used RCS today.")]),_v(" Other RCS tools include Mercurial, Subversion (SVN), Perforce, CVS (Concurrent Versions System), Bazaar, TFS (Team Foundation Server), and Clearcase.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_c('span',{staticClass:"large"},[_c('a',{attrs:{"href":"https://github.com/"}},[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}}),_v(" Github")])]),_v(" is a web-based project hosting platform for projects using Git for revision control.")]),_v(" Other similar services include GitLab, BitBucket, and SourceForge.")])}
},function anonymous(
) {
with(this){return _c('h5',{attrs:{"id":"tracking-and-ignoring"}},[_v("Tracking and ignoring"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#tracking-and-ignoring","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("In a repo, you can specify which files to track and which files to "),_c('mark',[_v("ignore")]),_v(".")]),_v(" Some files such as temporary log files created during the build/test process should not be revision-controlled.")])}
},function anonymous(
) {
with(this){return _c('h5',{attrs:{"id":"staging-and-committing"}},[_v("Staging and committing"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#staging-and-committing","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Each commit in a repo is a recorded point in the history of the project that is uniquely identified by an auto-generated "),_c('mark',[_v("hash")])]),_v(" e.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("a16043703f28e5b3dab95915f5c5e5bf4fdc5fc1")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("You can "),_c('mark',[_v("tag")]),_v(" a specific commit with a more easily identifiable name")]),_v(" e.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("v1.0.2")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("To see what changed between two points of the history, you can ask the RCS tool to  "),_c('mark',[_c('em',[_v("diff")])]),_v(" the two commits in concern.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("To restore the state of the working directory at a point in the past, you can "),_c('mark',[_c('em',[_v("checkout")])]),_v(" the commit in concern.")]),_v(" i.e., you can traverse the history of the working directory simply by checking out the commits you are interested in.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Remote repositories are repos that are hosted on remote computers")]),_v(" and allow remote access. They are especially useful for sharing the revision history of a codebase among team members of a multi-person project. "),_c('span',{staticClass:"dimmed"},[_v("They can also serve as a remote backup of your codebase.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("It is possible to set up your own remote repo on a server")]),_v(", but the easier option is to use a remote repo hosting service such as GitHub or BitBucket.")])}
},function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"section-cloning"}},[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("clone")])]),_v(" a repo")]),_v(" to create a copy of that repo in another location on your computer. The copy will even have the revision history of the original repo i.e., identical to the original repo. For example, you can clone a remote repo onto your computer to create a local copy of the remote repo."),_c('br')])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("When you clone from a repo, the original repo is commonly referred to as the "),_c('mark',[_c('em',[_v("upstream")])]),_v(" repo.")]),_v(" A repo can have multiple upstream repos. For example, let's say a repo "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo1")]),_v(" was cloned as "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo2")]),_v(" which was then cloned as "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo3")]),_v(". In this case, "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo1")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo2")]),_v(" are upstream repos of "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo3")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('strong',[_v("You can "),_c('mark',[_c('em',[_v("pull")])]),_v(" from one repo to another, to receive new commits in the second repo")])}
},function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"section-pushing"}},[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("push")])]),_v(" new commits in one repo to another repo")]),_v(" which will copy the new commits onto the destination repo. Note that pushing to a repo requires you to have write-access to it. Furthermore, you can push between repos only if those repos have a shared history among them (i.e., one was created by copying the other at some point in the past).")])])}
},function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"section-working-with-multiple-repos"}},[_c('p',[_c('strong',[_v("A repo can work with any number of other repositories as long as they have a shared history")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo1")]),_v(" can pull from (or push to) "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo2")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("repo3")]),_v(" if they have a shared history between them.")])])}
},function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"section-forking"}},[_c('p',[_c('strong',[_v("A "),_c('mark',[_c('em',[_v("fork")])]),_v(" is a remote copy of a remote repo")]),_v(". As you know, cloning creates a local copy of a repo. In contrast, forking creates a remote copy of a Git repo hosted on GitHub. This is particularly useful if you want to play around with a GitHub repo but you don't have write permissions to it; you can simply fork the repo and do whatever you want with the fork as you are the owner of the fork.")])])}
},function anonymous(
) {
with(this){return _c('strong',[_v("A "),_c('mark',[_c('em',[_v("pull request")])]),_v(" (PR for short) is a mechanism for contributing code to a remote repo,")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here is a scenario that includes all the concepts introduced above (click "),_c('em',[_v("inside")]),_v(" the slide to advance the animation):")])}
},function anonymous(
) {
with(this){return _c('div',{staticClass:"block-embed-service-powerpoint"},[_c('iframe',{attrs:{"type":"text/html","src":"https://onedrive.live.com/embed?cid=A5AF047C4CAD67AB&resid=A5AF047C4CAD67AB%212290&authkey=&em=2&action=embedview&wdAr=1.3333333333333333","frameborder":"0","width":"610","height":"481","webkitallowfullscreen":"","mozallowfullscreen":"","allowfullscreen":""}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_c('em',[_v("Branching")]),_v(" is the process of evolving multiple versions of the software in parallel.")]),_v(" For example, one team member can create a new branch and add an experimental feature to it while the rest of the team keeps working on another branch. Branches can be given names e.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("master")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("release")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("dev")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("A branch can be "),_c('em',[_v("merged")]),_v(" into another branch.")]),_v(" Merging usually results in a new commit that represents the changes done in the branch being merged.")])}
},function anonymous(
) {
with(this){return _c('strong',[_c('em',[_v("Merge conflicts")]),_v(" happen when you try to merge two branches that had changed the same part of the code")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("RCS can be done in two ways: the "),_c('em',[_v("centralized")]),_v(" way and the "),_c('em',[_v("distributed")]),_v(" way.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Centralized RCS (CRCS for short) uses a central remote repo that is shared by the team.")]),_v(" Team members download (‘pull’) and upload (‘push’) changes between their own local repositories and the central repository. Older RCS tools such as CVS and SVN support only this model. Note that these older RCS do not support the notion of a local repo either. Instead, they force users to do all the versioning with the remote repo.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Distributed RCS (DRCS for short, also known as Decentralized RCS) allows multiple remote repos")]),_v(" and pulling and pushing can be done among them in arbitrary ways. The workflow can vary differently from team to team.  For example, every team member can have his/her own remote repository in addition to their own local repository, as shown in the diagram below. Git and Mercurial are some prominent RCS tools that support the distributed approach.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("In the "),_c('em',[_v("forking workflow")]),_v(", the 'official' version of the software is kept in a remote repo designated as the 'main repo'. All team members fork the main repo and create pull requests from their fork to the main repo.")])])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("["),_c('span',[_c('strong',[_v("Powered by")])]),_v(" "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"30"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 5.1.0")]),_v(", generated on Fri, 3 Nov 2023, 21:01:35 GMT+8]")])])])}
}];
  